{"version":3,"sources":["../src/utils/email/constants.ts","../src/utils/email/aiSuggestEmail.ts","../src/utils/email/fuzzyDomainMatching.ts","../src/utils/email/validateEmail.ts","../src/utils/email/normaliseEmail.ts","../src/composables/useEmail.ts","../src/directives/email.ts"],"names":["env","pipeline","levenshtein","ref","computed","watch"],"mappings":"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","file":"index.cjs","sourcesContent":["import type { EmailBlockConfig } from './types'\n\n/**\n * Default domain correction mappings for common email provider typos and variations.\n *\n * This object contains mappings from commonly misspelled or variant domain names\n * to their correct counterparts. It includes typos for major email providers\n * like Gmail, Hotmail, Outlook, Yahoo, iCloud, and others.\n *\n * @example\n * ```typescript\n * // \"gamil.com\" will be corrected to \"gmail.com\"\n * // \"hotmial.com\" will be corrected to \"hotmail.com\"\n * normaliseEmail('user@gamil.com') // Returns email normalised to 'user@gmail.com'\n * ```\n *\n * Categories included:\n * - Gmail variations (15 mappings)\n * - Hotmail variations (9 mappings)\n * - Outlook variations (9 mappings)\n * - Yahoo variations (9 mappings)\n * - iCloud variations (7 mappings)\n * - UK domain variations (6 mappings)\n * - Other providers (9 mappings)\n * - Business domains (3 mappings)\n * - Additional typos (4 mappings)\n */\nexport const DEFAULT_FIX_DOMAINS: Record<string, string> = {\n  // Gmail variations\n  'gamil.com': 'gmail.com',\n  'gnail.com': 'gmail.com',\n  'gmail.co': 'gmail.com',\n  'googlemail.com': 'gmail.com',\n  'gmial.com': 'gmail.com',\n  'gmai.com': 'gmail.com',\n  'gmaill.com': 'gmail.com',\n  'gmali.com': 'gmail.com',\n  'gail.com': 'gmail.com',\n  'gmeil.com': 'gmail.com',\n  'gmail.con': 'gmail.com',\n  'gmail.cim': 'gmail.com',\n  'gmail.vom': 'gmail.com',\n  'gmail.c0m': 'gmail.com',\n  'gmsil.com': 'gmail.com',\n\n  // Hotmail variations\n  'hotnail.com': 'hotmail.com',\n  'hotmial.com': 'hotmail.com',\n  'hotmali.com': 'hotmail.com',\n  'hotmai.com': 'hotmail.com',\n  'hotmil.com': 'hotmail.com',\n  'hotmaill.com': 'hotmail.com',\n  'hotmail.co': 'hotmail.com',\n  'hotmail.con': 'hotmail.com',\n  'hotmeil.com': 'hotmail.com',\n\n  // Outlook variations\n  'outlok.com': 'outlook.com',\n  'outllok.com': 'outlook.com',\n  'outlool.com': 'outlook.com',\n  'outloook.com': 'outlook.com',\n  'outlook.co': 'outlook.com',\n  'outlook.con': 'outlook.com',\n  'outlookl.com': 'outlook.com',\n  'outook.com': 'outlook.com',\n  'otlook.com': 'outlook.com',\n\n  // Yahoo variations\n  'yahho.com': 'yahoo.com',\n  'yahooo.com': 'yahoo.com',\n  'yaho.com': 'yahoo.com',\n  'yahoo.co': 'yahoo.com',\n  'yahoo.con': 'yahoo.com',\n  'yohoo.com': 'yahoo.com',\n  'yhoo.com': 'yahoo.com',\n  'yahool.com': 'yahoo.com',\n  'yaoo.com': 'yahoo.com',\n\n  // iCloud variations\n  'icloud.co': 'icloud.com',\n  'icloud.con': 'icloud.com',\n  'icould.com': 'icloud.com',\n  'iclound.com': 'icloud.com',\n  'iclod.com': 'icloud.com',\n  'iclud.com': 'icloud.com',\n  'icaloud.com': 'icloud.com',\n\n  // UK domain variations\n  'outlook.co,uk': 'outlook.co.uk',\n  'hotmail.co,uk': 'hotmail.co.uk',\n  'btinternet.co,uk': 'btinternet.co.uk',\n  'gmail.co,uk': 'gmail.co.uk',\n  'yahoo.co,uk': 'yahoo.co.uk',\n  'live.co,uk': 'live.co.uk',\n\n  // Other common providers\n  'aol.co': 'aol.com',\n  'aol.con': 'aol.com',\n  'comcast.nte': 'comcast.net',\n  'comcas.net': 'comcast.net',\n  'verizon.nte': 'verizon.net',\n  'verison.net': 'verizon.net',\n  'sbcglobal.nte': 'sbcglobal.net',\n  'earthlink.nte': 'earthlink.net',\n  'cox.nte': 'cox.net',\n\n  // Business/work emails\n  'compan.com': 'company.com',\n  'compnay.com': 'company.com',\n  'corperation.com': 'corporation.com',\n\n  // Additional common typos\n  'live.co': 'live.com',\n  'live.con': 'live.com',\n  'msn.co': 'msn.com',\n  'msn.con': 'msn.com',\n}\n\n/**\n * Default Top-Level Domain (TLD) correction mappings for common typos.\n *\n * This object contains mappings from commonly misspelled TLD endings\n * to their correct counterparts. It helps fix typos in email addresses\n * where users have mistyped the domain extension.\n *\n * @example\n * ```typescript\n * // \".con\" will be corrected to \".com\"\n * // \".co,uk\" will be corrected to \".co.uk\"\n * normaliseEmail('user@example.con') // Returns email normalised to 'user@example.com'\n * ```\n *\n * Categories included:\n * - .com variations (16 mappings): .cpm, .con, .ocm, .vom, etc.\n * - .net variations (10 mappings): .ne, .nt, .bet, .met, etc.\n * - .org variations (8 mappings): .ogr, .or, .og, .orh, etc.\n * - .edu variations (5 mappings): .ed, .eud, .deu, etc.\n * - .co.uk variations (9 mappings): .co,uk, .couk, .co.k, etc.\n * - Generic TLD variations (4 mappings): .inf → .info, .bi → .biz\n * - Mobile TLD variations (2 mappings): .mob → .mobi, .mobile → .mobi\n */\nexport const DEFAULT_FIX_TLDS: Record<string, string> = {\n  // Common .com typos\n  '.cpm': '.com',\n  '.con': '.com',\n  '.ocm': '.com',\n  '.vom': '.com',\n  '.co': '.com',\n  '.cm': '.com',\n  '.om': '.com',\n  '.cmo': '.com',\n  '.comm': '.com',\n  '.comn': '.com',\n  '.c0m': '.com',\n  '.cim': '.com',\n  '.xom': '.com',\n  '.fom': '.com',\n  '.dom': '.com',\n  '.coom': '.com',\n\n  // Common .net typos\n  '.ne': '.net',\n  '.nt': '.net',\n  '.bet': '.net',\n  '.met': '.net',\n  '.jet': '.net',\n  '.nett': '.net',\n  '.netr': '.net',\n  '.het': '.net',\n  '.nwt': '.net',\n  '.nte': '.net',\n\n  // Common .org typos\n  '.ogr': '.org',\n  '.or': '.org',\n  '.og': '.org',\n  '.orh': '.org',\n  '.orgg': '.org',\n  '.orgr': '.org',\n  '.0rg': '.org',\n  '.prg': '.org',\n\n  // Common .edu typos\n  '.ed': '.edu',\n  '.eud': '.edu',\n  '.deu': '.edu',\n  '.eduu': '.edu',\n  '.wdu': '.edu',\n\n  // UK domain variations\n  '.co,uk': '.co.uk',\n  '.couk': '.co.uk',\n  '.co.k': '.co.uk',\n  '.co.u': '.co.uk',\n  '.c.uk': '.co.uk',\n  '.co.ik': '.co.uk',\n  '.co.ul': '.co.uk',\n  '.co.ukk': '.co.uk',\n  '.cou.k': '.co.uk',\n\n  // Generic TLD typos\n  '.inf': '.info',\n  '.inof': '.info',\n  '.bi': '.biz',\n  '.bizz': '.biz',\n\n  // Mobile/new TLD typos\n  '.mob': '.mobi',\n  '.mobile': '.mobi',\n}\n\n/**\n * Default email blocklist configuration to prevent invalid or unwanted email addresses.\n *\n * This configuration defines patterns for blocking certain types of email addresses,\n * including test domains, temporary email services, and example domains that should\n * not be used in production environments.\n *\n * @example\n * ```typescript\n * // These emails will be blocked:\n * normaliseEmail('user@example.com')      // blocked by exact match\n * normaliseEmail('user@test.mailinator.com') // blocked by wildcard pattern\n * normaliseEmail('user@domain.test')      // blocked by TLD\n * ```\n *\n * Blocking categories:\n * - **Exact domains** (5 entries): Specific domains like example.com, test.com\n * - **Suffix patterns** (2 entries): Domains ending with .example, .test\n * - **Wildcard patterns** (3 entries): Pattern matching for temporary email services\n * - **Blocked TLDs** (4 entries): Top-level domains like .test, .invalid, .example\n *\n * The configuration also supports an allowlist that can override blocked domains\n * for specific exceptions when needed.\n */\nexport const DEFAULT_BLOCKLIST: EmailBlockConfig = {\n  block: {\n    exact: [\n      'example.com',\n      'test.com',\n      'mailinator.com',\n      '10minutemail.com',\n      'guerrillamail.com',\n    ],\n    suffix: ['.example', '.test'],\n    wildcard: ['*.mailinator.com', '*.tempmail.*', '*.discard.email'],\n    tlds: ['.test', '.invalid', '.example', '.localhost'],\n  },\n  allow: { exact: [] },\n}\n\n// --- Email Validation Codes -----------------------------------------------\n\n/**\n * Enumeration of all possible email validation result codes.\n *\n * These codes represent the different validation states an email address\n * can have during the validation process. Each code corresponds to a\n * specific validation check.\n *\n * @example\n * ```typescript\n * const results = validateEmail('user@invalid-domain')\n * // results[0].validationCode might be EmailValidationCodes.INVALID_DOMAIN\n * ```\n */\nexport const EmailValidationCodes = Object.freeze({\n  /** Email address passed all validation checks */\n  VALID: 'VALID',\n  /** Email input was empty or only whitespace */\n  EMPTY: 'EMPTY',\n  /** Email format does not match valid email structure */\n  INVALID_FORMAT: 'INVALID_FORMAT',\n  /** Email domain is in the configured blocklist */\n  BLOCKLISTED: 'BLOCKLISTED',\n  /** Email domain matches a known typo in the corrections list */\n  INVALID_DOMAIN: 'INVALID_DOMAIN',\n  /** Email TLD matches a known typo in the corrections list */\n  INVALID_TLD: 'INVALID_TLD',\n  /** Email contains non-ASCII characters when ASCII-only mode is enabled */\n  NON_ASCII_CHARACTERS: 'NON_ASCII_CHARACTERS',\n  /** Email domain has a suggested correction based on fuzzy matching */\n  DOMAIN_SUGGESTION: 'DOMAIN_SUGGESTION',\n} as const)\n\n/**\n * Type representing any valid email validation code from the EmailValidationCodes enumeration.\n *\n * This is a union type of all possible validation code values that can be returned\n * during email validation.\n *\n * @example\n * ```ts\n * function isFormatError(code: EmailValidationCode) {\n *   return code === EmailValidationCodes.INVALID_FORMAT;\n * }\n * ```\n */\nexport type EmailValidationCode =\n  (typeof EmailValidationCodes)[keyof typeof EmailValidationCodes]\n\n// --- Email Change Codes ---------------------------------------------------\n\n/**\n * Enumeration of all possible email normalization change codes.\n *\n * These machine-readable codes represent specific transformations that can be\n * applied during the email normalization process. Each code corresponds to a\n * specific step in the normalization pipeline.\n *\n * @example\n * ```typescript\n * const result = normaliseEmail('User (comment) at gmail dot com')\n * // result.changeCodes might include:\n * // ['stripped_display_name_and_comments', 'deobfuscated_at_and_dot', 'lowercased_domain']\n * ```\n */\nexport const EmailChangeCodes = Object.freeze({\n  /** Email input was empty or only whitespace */\n  EMPTY: 'empty',\n  /** Email was blocked by the configured blocklist */\n  BLOCKED_BY_LIST: 'blocked_by_list',\n  /** Replaced obfuscated \"at\" and \"dot\" text with @ and . symbols */\n  DEOBFUSCATED_AT_AND_DOT: 'deobfuscated_at_and_dot',\n  /** Applied domain and TLD typo corrections from the fix mappings */\n  FIXED_DOMAIN_AND_TLD_TYPOS: 'fixed_domain_and_tld_typos',\n  /** Applied fuzzy domain matching to correct likely domain typos */\n  FUZZY_DOMAIN_CORRECTION: 'fuzzy_domain_correction',\n  /** Email format was invalid and could not be normalised */\n  INVALID_EMAIL_SHAPE: 'invalid_email_shape',\n  /** Converted domain part to lowercase */\n  LOWERCASED_DOMAIN: 'lowercased_domain',\n  /** Converted Unicode symbols (＠, ．, 。) to ASCII equivalents */\n  NORMALISED_UNICODE_SYMBOLS: 'normalised_unicode_symbols',\n  /** Removed display names, comments, or angle bracket formatting */\n  STRIPPED_DISPLAY_NAME_AND_COMMENTS: 'stripped_display_name_and_comments',\n  /** Cleaned up spacing, punctuation, and formatting issues */\n  TIDIED_PUNCTUATION_AND_SPACING: 'tidied_punctuation_and_spacing',\n  /** Converted non-ASCII characters to ASCII equivalents or removed them */\n  CONVERTED_TO_ASCII: 'converted_to_ascii',\n} as const)\n\n/**\n * Machine-readable code for a single normalization change.\n *\n * This is the union of the values from `EmailChangeCodes`. Use it to build\n * analytics, filtering, or to toggle UI badges without stringly-typed checks.\n *\n * @example\n * ```ts\n * function hasAsciiFix(r: EmailNormResult) {\n *   return r.changeCodes.includes(EmailChangeCodes.CONVERTED_TO_ASCII as EmailChangeCode);\n * }\n * ```\n */\nexport type EmailChangeCode =\n  (typeof EmailChangeCodes)[keyof typeof EmailChangeCodes]\n\n/**\n * Default list of popular email domains used for fuzzy domain matching.\n *\n * This readonly array contains a curated list of common email service provider\n * domains. It is used as the default candidate list for fuzzy matching algorithms\n * to suggest corrections for misspelled or mistyped email domains.\n *\n * @example\n * ```typescript\n * // \"gmai.com\" will be suggested as \"gmail.com\"\n * const suggestion = findClosestDomain('gmai.com', DEFAULT_FUZZY_DOMAIN_CANDIDATES);\n * console.log(suggestion); // { domain: 'gmail.com', distance: 1 }\n * ```\n */\nexport const DEFAULT_FUZZY_DOMAIN_CANDIDATES = [\n  // Global majors\n  'gmail.com',\n  'outlook.com',\n  'hotmail.com',\n  'live.com',\n  'msn.com',\n\n  // Apple\n  'icloud.com',\n  'me.com',\n  'mac.com',\n\n  // Yahoo (global + UK)\n  'yahoo.com',\n  'yahoo.co.uk',\n\n  // Google legacy alias\n  'googlemail.com',\n\n  // Privacy & indie providers\n  'proton.me',\n  'fastmail.com',\n  'zoho.com',\n\n  // Popular UK ISPs (still seen in the wild)\n  'btinternet.co.uk',\n  'talktalk.net',\n  'talktalk.co.uk',\n  'sky.com',\n  'sky.co.uk',\n  'virginmedia.com',\n  'virginmedia.co.uk',\n  'blueyonder.co.uk',\n  'ntlworld.com',\n  'ntlworld.co.uk',\n] as const\n\n/**\n * Default list of email domains used for AI embedding-based domain suggestions.\n *\n * This readonly array contains a comprehensive list of common email service provider\n * domains plus popular SaaS/corporate domains. It is used as the default candidate\n * list for AI-powered domain suggestion algorithms that use transformer embeddings\n * to find semantically similar domain names.\n *\n * The list includes consumer email providers, UK ISPs, and common business domains\n * that users might be trying to type when they make typos.\n *\n * @example\n * ```typescript\n * // \"gmial.com\" will be suggested as \"gmail.com\" using embedding similarity\n * const suggestion = await aiSuggestEmailDomain('gmial.com', {\n *   candidates: DEFAULT_AI_EMBEDDING_CANDIDATES\n * });\n * console.log(suggestion); // { suggestion: 'gmail.com', confidence: 0.85, reason: 'embedding_similarity' }\n * ```\n */\nexport const DEFAULT_AI_EMBEDDING_CANDIDATES = [\n  // Consumer email providers\n  'gmail.com',\n  'googlemail.com',\n  'outlook.com',\n  'hotmail.com',\n  'live.com',\n  'msn.com',\n  'icloud.com',\n  'me.com',\n  'mac.com',\n  'yahoo.com',\n  'yahoo.co.uk',\n  'proton.me',\n  'fastmail.com',\n  'zoho.com',\n  // UK ISPs\n  'btinternet.co.uk',\n  'virginmedia.com',\n  'virginmedia.co.uk',\n  'blueyonder.co.uk',\n  'ntlworld.com',\n  'ntlworld.co.uk',\n  'talktalk.net',\n  'talktalk.co.uk',\n  'sky.com',\n  'sky.co.uk',\n  // Common SaaS/corporate domains\n  'salesforce.com',\n  'atlassian.com',\n  'slack.com',\n  'github.com',\n] as const\n","import type { FeatureExtractionPipeline } from '@xenova/transformers'\nimport { env, pipeline } from '@xenova/transformers'\n\nimport { DEFAULT_AI_EMBEDDING_CANDIDATES } from './constants'\nimport type { AiEmailOptions, AiEmailSuggestion } from './types'\n\n// Configure transformers.js\n// Allow remote models in test environment, otherwise use local only\nenv.allowRemoteModels =\n  process.env.NODE_ENV === 'test' || process.env.ALLOW_REMOTE_MODELS === 'true'\nenv.allowLocalModels = true\nenv.cacheDir = './public/models' // where models are cached\n// and point ORT WASM to your local /onnx/ if you're using the browser backend\n// env.backends.onnx.wasm.wasmPaths = '/onnx/'\n\nlet extractorPromise: Promise<FeatureExtractionPipeline> | null = null\nconst cache = new Map<string, Float32Array>()\n\nasync function getExtractor(model: string) {\n  if (!extractorPromise) {\n    extractorPromise = pipeline('feature-extraction', model)\n  }\n  return extractorPromise\n}\n\nfunction cosine(a: Float32Array, b: Float32Array): number {\n  let dot = 0,\n    na = 0,\n    nb = 0\n  for (let i = 0; i < a.length; i++) {\n    dot += a[i] * b[i]\n    na += a[i] * a[i]\n    nb += b[i] * b[i]\n  }\n  return dot / (Math.sqrt(na) * Math.sqrt(nb) + 1e-12)\n}\n\nfunction levenshtein(a: string, b: string): number {\n  const dp = Array.from({ length: a.length + 1 }, (_) =>\n    new Array<number>(b.length + 1).fill(0)\n  )\n  for (let i = 0; i <= a.length; i++) dp[i][0] = i\n  for (let j = 0; j <= b.length; j++) dp[0][j] = j\n  for (let i = 1; i <= a.length; i++) {\n    for (let j = 1; j <= b.length; j++) {\n      const cost = a[i - 1] === b[j - 1] ? 0 : 1\n      dp[i][j] = Math.min(\n        dp[i - 1][j] + 1, // del\n        dp[i][j - 1] + 1, // ins\n        dp[i - 1][j - 1] + cost // sub\n      )\n    }\n  }\n  return dp[a.length][b.length]\n}\n\n/**\n * Get a domain suggestion using transformer embeddings vs a curated list.\n * Returns null if we’re not confident enough.\n */\nexport async function aiSuggestEmailDomain(\n  domain: string,\n  options: AiEmailOptions = {}\n): Promise<AiEmailSuggestion | null> {\n  const d = domain.toLowerCase().trim()\n  if (!d || !/[a-z]/i.test(d)) return null\n\n  const model = options.model ?? 'Xenova/all-MiniLM-L6-v2'\n  const threshold = options.threshold ?? 0.82\n  const maxEdits = options.maxEdits ?? 2\n  const candidates = (\n    options.candidates && options.candidates.length\n      ? options.candidates\n      : DEFAULT_AI_EMBEDDING_CANDIDATES\n  ).map((x) => x.toLowerCase())\n\n  const extractor = await getExtractor(model)\n\n  async function embed(text: string): Promise<Float32Array> {\n    if (cache.has(text)) return cache.get(text)!\n    const output = await extractor(text, {\n      pooling: 'mean',\n      normalize: true,\n    })\n\n    // Both real @xenova/transformers and our mocks return Tensor objects with .data property\n    if (output && typeof output === 'object' && 'data' in output) {\n      const arr = Array.from(output.data as Float32Array)\n      const v = new Float32Array(arr)\n      cache.set(text, v)\n      return v\n    }\n\n    throw new Error(\n      `Unexpected output format from feature extraction: expected Tensor object with .data property`\n    )\n  }\n\n  const q = await embed(d)\n  let best: { cand: string; sim: number } | null = null\n\n  for (const cand of candidates) {\n    const v = await embed(cand)\n    const sim = cosine(q, v)\n    if (!best || sim > best.sim) best = { cand, sim }\n  }\n\n  if (!best || best.sim < threshold) return null\n\n  // Extra guard: small edit distance (prevents semantically close but structurally different)\n  if (levenshtein(d, best.cand) > maxEdits) return null\n\n  return {\n    suggestion: best.cand,\n    confidence: best.sim,\n    reason: 'embedding_similarity',\n  }\n}\n\n// Export cache clearing function for testing\nexport function __clearCache() {\n  extractorPromise = null\n  cache.clear()\n}\n","import { DEFAULT_FUZZY_DOMAIN_CANDIDATES } from './constants'\nimport type {\n  ClosestDomainResult,\n  DomainCandidate,\n  FindClosestOptions,\n} from './types'\n\n/**\n * Compute Levenshtein distance (edit distance) between two ASCII-ish strings.\n * Optimized with two rolling rows; optional early exit with `maxDistance`.\n *\n * @example\n * levenshtein('gmai.com', 'gmail.com') // -> 1\n *\n * @param {string} a The first string\n * @param {string} b The second string\n * @param {number} [maxDistance=Infinity] Optional max distance for early exit\n * @returns {number} The Levenshtein distance between the two strings\n */\nexport function levenshtein(\n  a: string,\n  b: string,\n  maxDistance = Infinity\n): number {\n  if (a === b) return 0\n  if (a.length === 0) return b.length\n  if (b.length === 0) return a.length\n\n  // Cheap bound: if length delta already exceeds the threshold, bail early.\n  const lenDiff = Math.abs(a.length - b.length)\n  if (lenDiff > maxDistance) return maxDistance + 1\n\n  // Ensure a is the shorter string to keep memory small.\n  if (a.length > b.length) [a, b] = [b, a]\n\n  const aLen = a.length\n  const bLen = b.length\n\n  let prev = new Array(aLen + 1)\n  let curr = new Array(aLen + 1)\n\n  for (let i = 0; i <= aLen; i++) prev[i] = i\n\n  for (let j = 1; j <= bLen; j++) {\n    const bj = b.charCodeAt(j - 1)\n    curr[0] = j\n\n    // Track the smallest value in this row to early-exit if it already exceeds maxDistance\n    let rowMin = curr[0]\n\n    for (let i = 1; i <= aLen; i++) {\n      const cost = a.charCodeAt(i - 1) === bj ? 0 : 1\n      const del = prev[i] + 1\n      const ins = curr[i - 1] + 1\n      const sub = prev[i - 1] + cost\n      const v = del < ins ? (del < sub ? del : sub) : ins < sub ? ins : sub\n      curr[i] = v\n      if (v < rowMin) rowMin = v\n    }\n\n    if (rowMin > maxDistance) return maxDistance + 1\n    ;[prev, curr] = [curr, prev]\n  }\n\n  return prev[aLen]\n}\n\n/**\n * Find the closest domain from a list of candidates using Levenshtein distance.\n *\n * @example\n * findClosestDomain('gmai.com')\n * // → gmail.com (distance 1, score ~0.88)\n *\n * @example\n * findClosestDomain('virginmeda.co.uk', { maxDistance: 3 })\n * // → virginmedia.co.uk (distance 1, score ~0.92)\n *\n * @param {string} input The input domain to match\n * @param {FindClosestOptions} [opts={}] Options for finding the closest domain\n * @returns {ClosestDomainResult} The closest domain result\n */\nexport function findClosestDomain(\n  input: string,\n  opts: FindClosestOptions = {}\n): ClosestDomainResult {\n  const {\n    candidates = DEFAULT_FUZZY_DOMAIN_CANDIDATES as Readonly<DomainCandidate[]>,\n    maxDistance = Infinity,\n    normalise = true,\n  } = opts\n  const combinedCandidates: string[] = [\n    ...DEFAULT_FUZZY_DOMAIN_CANDIDATES,\n    ...candidates,\n  ]\n\n  const norm = (s: string) => (normalise ? s.trim().toLowerCase() : s)\n  const q = norm(input)\n\n  let bestIdx = -1\n  let bestCandidate: string | null = null\n  let bestDist = Number.POSITIVE_INFINITY\n\n  for (let i = 0; i < combinedCandidates.length; i++) {\n    const c = norm(String(combinedCandidates[i]))\n    const dist = levenshtein(q, c, maxDistance)\n    if (dist < bestDist) {\n      bestDist = dist\n      bestCandidate = c\n      bestIdx = i\n      if (bestDist === 0) break // perfect match, can stop\n    }\n  }\n\n  // Enforce threshold if provided\n  if (bestDist > maxDistance) {\n    return {\n      input,\n      candidate: null,\n      distance: bestDist,\n      normalisedScore: 0,\n      index: -1,\n    }\n  }\n\n  const denom = Math.max(q.length, bestCandidate ? bestCandidate.length : 1)\n  const normalisedScore = denom > 0 ? 1 - bestDist / denom : 1\n\n  return {\n    input,\n    candidate: bestCandidate,\n    distance: bestDist,\n    normalisedScore,\n    index: bestIdx,\n  }\n}\n","import {\n  DEFAULT_BLOCKLIST,\n  DEFAULT_FIX_DOMAINS,\n  DEFAULT_FIX_TLDS,\n  DEFAULT_FUZZY_DOMAIN_CANDIDATES,\n  type EmailValidationCode,\n  EmailValidationCodes,\n} from './constants'\nimport { findClosestDomain } from './fuzzyDomainMatching'\nimport type {\n  EmailBlockConfig,\n  EmailValidationOptions,\n  FindClosestOptions,\n  ValidationResult,\n  ValidationResults,\n} from './types'\n\n// --- helpers -------------------------------------------------------\n\n// --- helpers -------------------------------------------------------\n\n/**\n * Convert a validation code to a human-readable reason.\n *\n * @param {EmailValidationCode} code\n * @returns {string | null}\n */\nexport function validationCodeToReason(\n  code: EmailValidationCode\n): string | null {\n  switch (code) {\n    case EmailValidationCodes.EMPTY:\n      return 'Email is empty.'\n\n    case EmailValidationCodes.INVALID_FORMAT:\n      return 'Email is not in a valid format.'\n\n    case EmailValidationCodes.BLOCKLISTED:\n      return 'Email domain is blocklisted.'\n\n    case EmailValidationCodes.INVALID_DOMAIN:\n      return 'Email domain is invalid.'\n\n    case EmailValidationCodes.INVALID_TLD:\n      return 'Email top-level domain (TLD) is invalid.'\n\n    case EmailValidationCodes.NON_ASCII_CHARACTERS:\n      return 'Email contains non-ASCII characters.'\n\n    case EmailValidationCodes.VALID:\n      return 'Email is valid.'\n\n    case EmailValidationCodes.DOMAIN_SUGGESTION:\n      return 'Email domain has a suggested correction.'\n\n    default:\n      console.debug(`Unknown validation code: ${code as string}`)\n\n      return null\n  }\n}\n\n/**\n * Check if a string is empty.\n *\n * @param {string} raw\n * @returns {boolean}\n */\nexport function isEmpty(raw: string): boolean {\n  const s = String(raw || '').trim()\n\n  return s.length === 0\n}\n\n/**\n * Check if email domain is blocklisted.\n *\n * @see DEFAULT_BLOCKLIST\n * @param {string} email - The full email address\n * @param {EmailBlockConfig} cfg\n * @returns {boolean}\n */\nexport function blocklisted(email: string, cfg: EmailBlockConfig): boolean {\n  // Extract domain from email\n  const atIndex = email.lastIndexOf('@')\n  if (atIndex === -1) {\n    return false // No @ symbol, not a valid email format\n  }\n\n  const domain = email.slice(atIndex + 1)\n  const d = domain.toLowerCase()\n\n  // allowlist overrides\n  const allowExact = (cfg.allow?.exact ?? []).map((s) => s.toLowerCase())\n  if (allowExact.includes(d)) {\n    return false\n  }\n\n  // exact\n  const exact = (cfg.block?.exact ?? []).map((s) => s.toLowerCase())\n  if (exact.includes(d)) {\n    return true\n  }\n\n  // tlds\n  for (const t of cfg.block?.tlds ?? []) {\n    const tt = t.toLowerCase()\n    if (tt && d.endsWith(tt)) {\n      return true\n    }\n  }\n\n  // suffix\n  for (const s of cfg.block?.suffix ?? []) {\n    const ss = s.toLowerCase()\n    if (ss && d.endsWith(ss)) {\n      return true\n    }\n  }\n\n  // wildcard\n  for (const w of cfg.block?.wildcard ?? []) {\n    const pat = String(w).toLowerCase()\n\n    if (!pat) {\n      continue\n    }\n\n    // fnmatch-like simple convert\n    // * -> .*\n    // ? -> .\n    // escape other regex chars\n    const re = new RegExp(\n      '^' +\n        pat\n          .replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&')\n          .replace(/\\*/g, '.*')\n          .replace(/\\?/g, '.') +\n        '$',\n      'i'\n    )\n\n    if (re.test(d)) {\n      return true\n    }\n  }\n\n  // explicit example/test base domains\n  if (/@(example|test)\\./i.test(`@${d}`)) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Quick check if string looks like an email shape.\n *\n * @param {string} s\n * @returns {boolean}\n */\nexport function looksLikeEmail(s: string): boolean {\n  // More permissive email validation that allows:\n  // - International characters in local part\n  // - TLDs of 2+ characters (including newer TLDs like .evil, .tech, etc.)\n  // - Basic structure validation: local@domain.tld\n\n  // Check for consecutive dots first\n  if (s.includes('..')) {\n    return false\n  }\n\n  // Basic structure check: must have exactly one @ and at least one dot after @\n  const atIndex = s.indexOf('@')\n  if (atIndex === -1 || s.indexOf('@', atIndex + 1) !== -1) {\n    return false // No @ or multiple @\n  }\n\n  const local = s.slice(0, atIndex)\n  const domain = s.slice(atIndex + 1)\n\n  // Local part must not be empty and not start/end with dot\n  if (!local || local.startsWith('.') || local.endsWith('.')) {\n    return false\n  }\n\n  // Check for invalid characters in local part using regex\n  // Matches: space, quote, angle brackets, semicolon, comma, parentheses, square brackets, curly brackets\n  if (/[ \"<>;,()[\\]{}]/.test(local)) {\n    return false\n  }\n\n  // Domain must not be empty\n  if (!domain) {\n    return false\n  }\n\n  // Check for invalid characters in domain using regex\n  // Matches: space, semicolon, comma, parentheses, plus, square brackets, curly brackets, angle brackets, underscore\n  if (/[ ;,(){}<>_+[\\]]/.test(domain)) {\n    return false\n  }\n\n  // Domain must have at least one dot and not start/end with dot or hyphen\n  if (!/\\./.test(domain) || /^[.-]|[.-]$/.test(domain)) {\n    return false\n  }\n\n  // TLD must be at least 2 characters and contain only letters\n  const tldMatch = domain.match(/\\.([a-zA-Z]{2,})$/)\n  if (!tldMatch) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Check if email domain matches any in the provided domains map.\n *\n * @param {string} email\n * @param {Record<string, string>} domains\n * @returns {boolean}\n */\nexport function checkDomain(\n  email: string,\n  domains: Record<string, string>\n): boolean {\n  const idx = email.lastIndexOf('@')\n\n  if (idx < 0) {\n    return false\n  }\n\n  let domain = email.slice(idx + 1)\n\n  // lowercase domain for predictability in mapping\n  domain = domain.toLowerCase()\n\n  // domain exact map\n  return !!domains[domain]\n}\n\n/**\n * Check if email TLD matches any in the provided TLDs list.\n *\n * @param {string} email\n * @param {string[]} tlds\n * @returns {boolean}\n */\nexport function checkTld(email: string, tlds: string[]): boolean {\n  const idx = email.lastIndexOf('@')\n\n  if (idx < 0) {\n    return false\n  }\n\n  let domain = email.slice(idx + 1)\n\n  // lowercase domain for predictability in mapping\n  domain = domain.toLowerCase()\n\n  // check if domain ends with any of the invalid TLDs\n  return tlds.some((tld) => {\n    // Handle TLDs that already include the dot prefix\n    if (tld.startsWith('.')) {\n      return domain.endsWith(tld)\n    }\n    // Handle TLDs without dot prefix\n    return domain.endsWith(`.${tld}`)\n  })\n}\n\n/**\n * Check if a string contains non-ASCII characters.\n *\n * @param {string} text - The text to check\n * @returns True if the text contains non-ASCII characters\n */\nfunction hasNonAsciiCharacters(text: string): boolean {\n  return /[^\\x20-\\x7E]/.test(text)\n}\n\n/**\n * Perform fuzzy domain matching for email validation suggestions.\n *\n * Analyzes the email address and provides domain correction suggestions\n * based on fuzzy string matching with confidence scoring.\n *\n * @param {string} email - The email address to analyze\n * @param {NonNullable<EmailValidationOptions['fuzzyMatching']>} config - Fuzzy matching configuration\n * @returns {ValidationResult | null} Validation result with domain suggestion or null if no suggestion\n *\n * @example\n * ```typescript\n * const suggestion = performFuzzyDomainValidation('user@gmaiil.com', {\n *   enabled: true,\n *   minConfidence: 0.7\n * })\n *\n * if (suggestion) {\n *   console.log(suggestion.validationMessage) // \"Did you mean: user@gmail.com?\"\n *   console.log(suggestion.suggestion?.confidence) // 0.89\n * }\n * ```\n */\nfunction performFuzzyDomainValidation(\n  email: string,\n  config: NonNullable<EmailValidationOptions['fuzzyMatching']>\n): ValidationResult | null {\n  // Early return if not enabled or email doesn't look valid\n  if (!config.enabled || !looksLikeEmail(email)) {\n    return null\n  }\n\n  const atIndex = email.lastIndexOf('@')\n  if (atIndex === -1) {\n    return null\n  }\n\n  const localPart = email.slice(0, atIndex)\n  const domainPart = email.slice(atIndex + 1)\n\n  // Combine default candidates with any custom candidates provided\n  const allCandidates = config.candidates\n    ? [...DEFAULT_FUZZY_DOMAIN_CANDIDATES, ...config.candidates]\n    : [...DEFAULT_FUZZY_DOMAIN_CANDIDATES] // Convert readonly array to mutable array\n\n  const fuzzyOptions: FindClosestOptions = {\n    maxDistance: config.maxDistance ?? 5, // Increased default to allow for more distant matches\n    candidates: allCandidates,\n    ...(config.findClosestOptions || {}),\n  }\n\n  const result = findClosestDomain(domainPart, fuzzyOptions)\n  const minConfidence = config.minConfidence ?? 0.7\n\n  // Only suggest if we found a candidate, it's different from input, and meets confidence threshold\n  if (\n    result.candidate &&\n    result.candidate !== domainPart.toLowerCase() &&\n    result.normalisedScore >= minConfidence &&\n    result.distance > 0\n  ) {\n    const suggestedEmail = `${localPart}@${result.candidate}`\n    return {\n      isValid: false,\n      validationCode: EmailValidationCodes.DOMAIN_SUGGESTION,\n      validationMessage: `Did you mean: ${suggestedEmail}?`,\n      suggestion: {\n        originalDomain: domainPart,\n        suggestedDomain: result.candidate,\n        confidence: result.normalisedScore,\n      },\n    }\n  }\n\n  return null\n}\n\n/**\n * Validate an email address and return validation results.\n *\n * Performs comprehensive validation including:\n * - Format validation (basic email structure)\n * - Domain validation (common typos and corrections)\n * - TLD validation (top-level domain corrections)\n * - Blocklist checking (known bad domains)\n * - ASCII-only validation (when enabled)\n * - Fuzzy domain matching for intelligent suggestions (when enabled)\n *\n * @param {string} email - The email address to validate\n * @param {EmailValidationOptions} options - Optional validation configuration\n * @returns {ValidationResults}\n *\n * @example\n * ```typescript\n * const results = validateEmail('user@example.com')\n * // Basic validation with defaults\n *\n * const customResults = validateEmail('user@typo.co', {\n *   fixTlds: { '.co': '.com' },\n *   asciiOnly: true\n * })\n * // Custom validation with TLD correction and ASCII-only\n *\n * const fuzzyResults = validateEmail('user@gmai.com', {\n *   fuzzyMatching: {\n *     enabled: true,\n *     maxDistance: 2,\n *     minConfidence: 0.7\n *   }\n * })\n * // Fuzzy validation with domain suggestions: suggests gmail.com\n * ```\n */\nexport function validateEmail(\n  email: string,\n  options: EmailValidationOptions = {}\n): ValidationResults {\n  const validationResults: ValidationResults = []\n\n  // Merge provided options with defaults (except blocklist which completely replaces)\n  const fixDomains = { ...DEFAULT_FIX_DOMAINS, ...(options.fixDomains || {}) }\n  const fixTlds = { ...DEFAULT_FIX_TLDS, ...(options.fixTlds || {}) }\n  const blocklist = options.blocklist || DEFAULT_BLOCKLIST\n  const asciiOnly = options.asciiOnly ?? true\n\n  if (isEmpty(email)) {\n    validationResults.push({\n      isValid: false,\n      validationCode: EmailValidationCodes.EMPTY,\n      validationMessage: validationCodeToReason(\n        EmailValidationCodes.EMPTY\n      ) as string,\n    })\n  }\n\n  if (!looksLikeEmail(email)) {\n    validationResults.push({\n      isValid: false,\n      validationCode: EmailValidationCodes.INVALID_FORMAT,\n      validationMessage: validationCodeToReason(\n        EmailValidationCodes.INVALID_FORMAT\n      ) as string,\n    })\n  }\n\n  if (checkDomain(email, fixDomains)) {\n    validationResults.push({\n      isValid: false,\n      validationCode: EmailValidationCodes.INVALID_DOMAIN,\n      validationMessage: validationCodeToReason(\n        EmailValidationCodes.INVALID_DOMAIN\n      ) as string,\n    })\n  }\n\n  if (checkTld(email, Object.keys(fixTlds))) {\n    validationResults.push({\n      isValid: false,\n      validationCode: EmailValidationCodes.INVALID_TLD,\n      validationMessage: validationCodeToReason(\n        EmailValidationCodes.INVALID_TLD\n      ) as string,\n    })\n  }\n\n  // Check if email domain is blocklisted\n  if (blocklisted(email, blocklist)) {\n    validationResults.push({\n      isValid: false,\n      validationCode: EmailValidationCodes.BLOCKLISTED,\n      validationMessage: validationCodeToReason(\n        EmailValidationCodes.BLOCKLISTED\n      ) as string,\n    })\n  }\n\n  // Check for non-ASCII characters if asciiOnly option is enabled\n  if (asciiOnly && hasNonAsciiCharacters(email)) {\n    validationResults.push({\n      isValid: false,\n      validationCode: EmailValidationCodes.NON_ASCII_CHARACTERS,\n      validationMessage: validationCodeToReason(\n        EmailValidationCodes.NON_ASCII_CHARACTERS\n      ) as string,\n    })\n  }\n\n  // Perform fuzzy domain matching if enabled and email has basic structure\n  const fuzzyConfig = options.fuzzyMatching\n  if (fuzzyConfig) {\n    const fuzzyResult = performFuzzyDomainValidation(email, fuzzyConfig)\n    if (fuzzyResult) {\n      validationResults.push(fuzzyResult)\n    }\n  }\n\n  return validationResults.length\n    ? validationResults\n    : [\n        {\n          isValid: true,\n          validationCode: EmailValidationCodes.VALID,\n          validationMessage: validationCodeToReason(\n            EmailValidationCodes.VALID\n          ) as string,\n        },\n      ]\n}\n","import { aiSuggestEmailDomain } from './aiSuggestEmail'\nimport {\n  DEFAULT_BLOCKLIST,\n  DEFAULT_FIX_DOMAINS,\n  DEFAULT_FIX_TLDS,\n  DEFAULT_FUZZY_DOMAIN_CANDIDATES,\n  type EmailChangeCode,\n  EmailChangeCodes,\n} from './constants'\nimport { findClosestDomain } from './fuzzyDomainMatching'\nimport type {\n  AiEmailOptions,\n  EmailFixResult,\n  EmailNormOptions,\n  EmailNormOptionsAI,\n  EmailNormResult,\n  EmailNormResultAI,\n  FindClosestOptions,\n} from './types'\nimport { blocklisted, isEmpty, looksLikeEmail } from './validateEmail'\n\n// --- helpers -------------------------------------------------------\n\n/**\n * Normalise fullwidth/Unicode variants of @ and .\n *\n * @param {string} s\n * @returns {EmailFixResult}\n */\nfunction toAsciiLike(s: string): EmailFixResult {\n  const out = s.replace(/[＠]/g, '@').replace(/[．。]/g, '.')\n\n  return {\n    out,\n    changed: out !== s,\n  }\n}\n\n/**\n * Remove or transliterate non-ASCII characters from email string.\n *\n * This function attempts basic transliteration for common international\n * characters and removes characters that can't be converted to ASCII.\n *\n * @param {string} s\n * @returns {EmailFixResult}\n */\nfunction toAsciiOnly(s: string): EmailFixResult {\n  const original = s\n  let out = s\n\n  // Basic transliteration map for common international characters\n  const transliterationMap: Record<string, string> = {\n    // Latin characters with diacritics\n    à: 'a',\n    á: 'a',\n    â: 'a',\n    ã: 'a',\n    ä: 'a',\n    å: 'a',\n    æ: 'ae',\n    ç: 'c',\n    è: 'e',\n    é: 'e',\n    ê: 'e',\n    ë: 'e',\n    ì: 'i',\n    í: 'i',\n    î: 'i',\n    ï: 'i',\n    ñ: 'n',\n    ò: 'o',\n    ó: 'o',\n    ô: 'o',\n    õ: 'o',\n    ö: 'o',\n    ø: 'o',\n    ù: 'u',\n    ú: 'u',\n    û: 'u',\n    ü: 'u',\n    ý: 'y',\n    ÿ: 'y',\n    ß: 'ss',\n    // Uppercase versions\n    À: 'A',\n    Á: 'A',\n    Â: 'A',\n    Ã: 'A',\n    Ä: 'A',\n    Å: 'A',\n    Æ: 'AE',\n    Ç: 'C',\n    È: 'E',\n    É: 'E',\n    Ê: 'E',\n    Ë: 'E',\n    Ì: 'I',\n    Í: 'I',\n    Î: 'I',\n    Ï: 'I',\n    Ñ: 'N',\n    Ò: 'O',\n    Ó: 'O',\n    Ô: 'O',\n    Õ: 'O',\n    Ö: 'O',\n    Ø: 'O',\n    Ù: 'U',\n    Ú: 'U',\n    Û: 'U',\n    Ü: 'U',\n    Ý: 'Y',\n  }\n\n  // Apply transliteration\n  for (const [nonAscii, ascii] of Object.entries(transliterationMap)) {\n    out = out.replace(new RegExp(nonAscii, 'g'), ascii)\n  }\n\n  // Remove any remaining non-ASCII characters (printable ASCII range)\n  out = out.replace(/[^ -~]/g, '')\n\n  return {\n    out,\n    changed: out !== original,\n  }\n}\n\n/**\n * Strip display name and comments from email string.\n *\n * @param {string} s\n * @returns {EmailFixResult}\n */\nfunction stripDisplayNameAndComments(s: string): EmailFixResult {\n  let out = s\n  const m = out.match(/<\\s*([^>]+)\\s*>/)\n\n  if (m) {\n    out = m[1]\n  }\n\n  // remove (comments)\n  const t = out.replace(/\\s*\\([^)]*\\)\\s*/g, '')\n\n  return {\n    out: t,\n    changed: t !== s,\n  }\n}\n\n/**\n * Deobfuscate common \"at\" and \"dot\" substitutions.\n *\n * @param {string} s\n * @returns {EmailFixResult}\n */\nfunction deobfuscate(s: string): EmailFixResult {\n  const original = s\n  let out = s\n\n  // Replace \"at\" with @ only when it's a standalone word or properly bracketed\n  // This prevents replacing \"at\" within legitimate domain names like \"mailinator.com\"\n\n  // Handle bracketed patterns first: [at], {at}, (at) -> @\n  out = out.replace(/[([{]\\s*at\\s*[)\\]}]/gi, '@')\n  // Handle spaced patterns: \" at \" -> @\n  out = out.replace(/\\s+at\\s+/gi, '@')\n\n  // Handle bracketed dot patterns: [dot], {dot}, (dot) -> .\n  out = out.replace(/[([{]\\s*d[0o]t\\s*[)\\]}]/gi, '.')\n  // Handle spaced dot patterns: \" dot \" -> .\n  out = out.replace(/\\s+d[0o]t\\s+/gi, '.')\n\n  // collapse multiple @ to a single @ (keep the first)\n  out = out.replace(/@{2,}/g, '@')\n\n  return {\n    out,\n    changed: out !== original,\n  }\n}\n\n/**\n * Tidy up punctuation and spacing in email string.\n *\n * E.g. trims spaces, removes trailing commas/semicolons/dots,\n * compresses spaces around @ and ., replaces commas in domain part,\n * and collapses repeating dots.\n *\n * @param {string} s\n * @returns {EmailFixResult}\n */\nfunction tidyPunctuation(s: string): EmailFixResult {\n  const original = s\n  let out = s.trim()\n  // strip trailing comma/semicolon/dot\n  out = out.replace(/[;,.]+$/g, '')\n  // strip leading comma/semicolon/dot\n  out = out.replace(/^[;,.]+/g, '')\n  // compress whitespace around @ and .\n  out = out.replace(/\\s*@\\s*/g, '@').replace(/\\s*\\.\\s*/g, '.')\n  // remove . after @\n  out = out.replace(/@\\./g, '@')\n  // replace commas in domain part: a@gmail,com -> a@gmail.com\n  const idx = out.indexOf('@')\n\n  if (idx !== -1) {\n    const local = out.slice(0, idx)\n    const domain = out.slice(idx + 1).replace(/,/g, '.')\n    out = `${local}@${domain}`\n  }\n\n  // replace repeating dots to one dot: \"a..b\" -> \"a.b\"\n  out = out.replace(/\\.{2,}/g, '.')\n\n  return {\n    out,\n    changed: out !== original,\n  }\n}\n\n/**\n * Apply domain and TLD fix maps to email string.\n *\n * @param {string} email\n * @param { domains: Record<string, string>, tlds: Record<string, string> } maps\n * @returns {EmailFixResult}\n */\nfunction applyMaps(\n  email: string,\n  maps: {\n    domains: Record<string, string>\n    tlds: Record<string, string>\n  }\n): EmailFixResult {\n  const idx = email.lastIndexOf('@')\n\n  if (idx < 0) {\n    return {\n      out: email,\n      changed: false,\n    }\n  }\n\n  let local = email.slice(0, idx)\n  let domain = email.slice(idx + 1)\n  const originalDomain = domain\n\n  // lowercase domain for predictability in mapping\n  domain = domain.toLowerCase()\n\n  // domain exact map\n  if (maps.domains[domain]) {\n    domain = maps.domains[domain]\n  }\n\n  // tld fixes (operate on the rightmost tld-ish substring)\n  for (const [bad, good] of Object.entries(maps.tlds)) {\n    if (domain.endsWith(bad)) {\n      domain = domain.slice(0, domain.length - bad.length) + good\n    }\n  }\n\n  // normalise casing of local minimally: keep as-is but trim quotes\n  const originalLocal = local\n  local = local.replace(/^\"(.*)\"$/, '$1')\n\n  const out = `${local}@${domain}`\n\n  // Check if actual changes were made beyond just lowercasing\n  const domainMapsChanged = domain !== originalDomain.toLowerCase()\n  const localChanged = local !== originalLocal\n\n  return {\n    out,\n    changed: domainMapsChanged || localChanged,\n  }\n}\n\n/**\n * Convert email change code to human-readable reason.\n *\n * @param {EmailChangeCode} code\n * @returns {string | null}\n */\nexport function changeCodeToReason(code: EmailChangeCode): string | null {\n  switch (code) {\n    case EmailChangeCodes.NORMALISED_UNICODE_SYMBOLS:\n      return 'Replaced unicode symbols.'\n\n    case EmailChangeCodes.INVALID_EMAIL_SHAPE:\n      return 'Invalid email format.'\n\n    case EmailChangeCodes.STRIPPED_DISPLAY_NAME_AND_COMMENTS:\n      return 'Removed display name or comments.'\n\n    case EmailChangeCodes.DEOBFUSCATED_AT_AND_DOT:\n      return 'Fixed obfuscated \"at\" or \"dot\" substitutions.'\n\n    case EmailChangeCodes.TIDIED_PUNCTUATION_AND_SPACING:\n      return 'Tidied punctuation and spacing.'\n\n    case EmailChangeCodes.FIXED_DOMAIN_AND_TLD_TYPOS:\n      return 'Corrected common domain or TLD typos.'\n\n    case EmailChangeCodes.FUZZY_DOMAIN_CORRECTION:\n      return 'Corrected domain using fuzzy matching.'\n\n    case EmailChangeCodes.LOWERCASED_DOMAIN:\n      return 'Lowercased domain part.'\n\n    case EmailChangeCodes.BLOCKED_BY_LIST:\n      return 'Email is blocked.'\n\n    case EmailChangeCodes.CONVERTED_TO_ASCII:\n      return 'Converted non-ASCII characters to ASCII.'\n\n    default:\n      globalThis.console.warn(`Unknown email change code: ${code as string}`)\n\n      return null\n  }\n}\n\n/**\n * Map an array of email change codes to human-readable reasons.\n *\n * @param {EmailChangeCode[]} codes\n * @returns {string[]}\n */\nfunction mapChangeCodesToReason(codes: EmailChangeCode[]): string[] {\n  return codes.map(changeCodeToReason).filter((r): r is string => r !== null)\n}\n\n/**\n * Perform fuzzy domain correction for email normalization.\n *\n * Analyzes the email address and applies domain corrections\n * based on fuzzy string matching with confidence scoring.\n *\n * @param {string} email - The email address to analyze\n * @param {NonNullable<EmailNormOptions['fuzzyMatching']>} config - Fuzzy matching configuration\n * @returns {{ correctedEmail: string; wasChanged: boolean }} Result with corrected email and change flag\n *\n * @example\n * ```typescript\n * const result = performFuzzyDomainNormalization('user@gmaiil.com', {\n *   enabled: true,\n *   minConfidence: 0.8\n * })\n *\n * if (result.wasChanged) {\n *   console.log(`Corrected: ${result.correctedEmail}`) // \"user@gmail.com\"\n * }\n * ```\n */\nfunction performFuzzyDomainNormalization(\n  email: string,\n  config: NonNullable<EmailNormOptions['fuzzyMatching']>\n): { correctedEmail: string; wasChanged: boolean } {\n  // Early return if not enabled or email doesn't look valid\n  if (!config.enabled || !looksLikeEmail(email)) {\n    return { correctedEmail: email, wasChanged: false }\n  }\n\n  const atIndex = email.lastIndexOf('@')\n  if (atIndex === -1) {\n    return { correctedEmail: email, wasChanged: false }\n  }\n\n  const localPart = email.slice(0, atIndex)\n  const domainPart = email.slice(atIndex + 1)\n\n  // Combine default candidates with any custom candidates provided\n  const allCandidates = config.candidates\n    ? [...DEFAULT_FUZZY_DOMAIN_CANDIDATES, ...config.candidates]\n    : [...DEFAULT_FUZZY_DOMAIN_CANDIDATES]\n\n  const fuzzyOptions: FindClosestOptions = {\n    maxDistance: config.maxDistance ?? 5,\n    candidates: allCandidates,\n    ...(config.findClosestOptions || {}),\n  }\n\n  const result = findClosestDomain(domainPart, fuzzyOptions)\n  const minConfidence = config.minConfidence ?? 0.8\n\n  // Only apply correction if we found a candidate, it's different from input, and meets confidence threshold\n  if (\n    result.candidate &&\n    result.candidate !== domainPart.toLowerCase() &&\n    result.normalisedScore >= minConfidence &&\n    result.distance > 0\n  ) {\n    const correctedEmail = `${localPart}@${result.candidate}`\n    if (correctedEmail !== email) {\n      return { correctedEmail, wasChanged: true }\n    }\n  }\n\n  return { correctedEmail: email, wasChanged: false }\n}\n\n// --- main ----------------------------------------------------------\n\n/**\n * Normalise and validate an email address.\n *\n * @param {string} raw\n * @param {EmailNormOptions} opts\n * @returns {EmailNormResult}\n */\nexport function normaliseEmail(\n  raw: string,\n  opts: EmailNormOptions = {}\n): EmailNormResult {\n  const changes: EmailChangeCode[] = []\n  let s = String(raw || '').trim()\n\n  const asciiOnly = opts.asciiOnly ?? true\n\n  if (isEmpty(s)) {\n    return {\n      email: s,\n      valid: false,\n      changes,\n      changeCodes: [],\n    }\n  }\n\n  {\n    const r = toAsciiLike(s)\n    if (r.changed) {\n      s = r.out\n      changes.push(EmailChangeCodes.NORMALISED_UNICODE_SYMBOLS)\n    }\n  }\n\n  {\n    const r = stripDisplayNameAndComments(s)\n    if (r.changed) {\n      s = r.out\n      changes.push(EmailChangeCodes.STRIPPED_DISPLAY_NAME_AND_COMMENTS)\n    }\n  }\n\n  {\n    const r = deobfuscate(s)\n    if (r.changed) {\n      s = r.out\n      changes.push(EmailChangeCodes.DEOBFUSCATED_AT_AND_DOT)\n    }\n  }\n\n  {\n    const r = tidyPunctuation(s)\n    if (r.changed) {\n      s = r.out\n      changes.push(EmailChangeCodes.TIDIED_PUNCTUATION_AND_SPACING)\n    }\n  }\n\n  {\n    const r = applyMaps(s, {\n      domains: { ...DEFAULT_FIX_DOMAINS, ...(opts.fixDomains || {}) },\n      tlds: { ...DEFAULT_FIX_TLDS, ...(opts.fixTlds || {}) },\n    })\n    if (r.changed) {\n      s = r.out\n      changes.push(EmailChangeCodes.FIXED_DOMAIN_AND_TLD_TYPOS)\n    }\n  }\n\n  // Apply fuzzy domain matching if enabled\n  const fuzzyConfig = opts.fuzzyMatching\n  if (fuzzyConfig) {\n    const fuzzyResult = performFuzzyDomainNormalization(s, fuzzyConfig)\n    if (fuzzyResult.wasChanged) {\n      s = fuzzyResult.correctedEmail\n      changes.push(EmailChangeCodes.FUZZY_DOMAIN_CORRECTION)\n    }\n  }\n\n  // Convert to ASCII only if requested\n  if (asciiOnly) {\n    const r = toAsciiOnly(s)\n    if (r.changed) {\n      s = r.out\n      changes.push(EmailChangeCodes.CONVERTED_TO_ASCII)\n    }\n  }\n\n  // lowercase domain\n  const at = s.indexOf('@')\n  if (at > -1) {\n    const local = s.slice(0, at)\n    const domain = s.slice(at + 1).toLowerCase()\n    const next = `${local}@${domain}`\n    if (next !== s) {\n      s = next\n      changes.push(EmailChangeCodes.LOWERCASED_DOMAIN)\n    }\n  }\n\n  // blocklist check (before shape validation to ensure blocklist takes priority)\n  const cfg = opts.blocklist || DEFAULT_BLOCKLIST\n  if (blocklisted(s, cfg)) {\n    return {\n      email: s,\n      valid: false,\n      changeCodes: [...changes, EmailChangeCodes.BLOCKED_BY_LIST],\n      changes: mapChangeCodesToReason([\n        ...changes,\n        EmailChangeCodes.BLOCKED_BY_LIST,\n      ]),\n    }\n  }\n\n  // quick shape validation\n  if (!looksLikeEmail(s)) {\n    changes.push(EmailChangeCodes.INVALID_EMAIL_SHAPE)\n\n    return {\n      email: s,\n      valid: false,\n      changeCodes: [...changes, EmailChangeCodes.INVALID_EMAIL_SHAPE],\n      changes: mapChangeCodesToReason([\n        ...changes,\n        EmailChangeCodes.INVALID_EMAIL_SHAPE,\n      ]),\n    }\n  }\n\n  return {\n    email: s,\n    valid: true,\n    changeCodes: changes,\n    changes: mapChangeCodesToReason(changes),\n  }\n}\n\n/**\n * # Valid Email Address Characters\n *\n * ## Local Part (before the @ symbol)\n *\n * ### Alphanumeric characters:\n * - Letters: `a-z A-Z` (case insensitive)\n * - Numbers: `0-9`\n *\n * ### Special characters allowed:\n * - Dot: `.` (but not at the beginning, end, or consecutively)\n * - Hyphen: `-`\n * - Underscore: `_`\n * - Plus: `+`\n * - Equals: `=`\n *\n * ### Additional characters (when quoted):\n * When the local part is enclosed in double quotes, these additional characters are allowed:\n * - Space: ` `\n * - Exclamation: `!`\n * - Hash: `#`\n * - Dollar: `$`\n * - Percent: `%`\n * - Ampersand: `&`\n * - Apostrophe: `'`\n * - Asterisk: `*`\n * - Forward slash: `/`\n * - Question mark: `?`\n * - Caret: `^`\n * - Backtick: `` ` ``\n * - Left brace: `{`\n * - Pipe: `|`\n * - Right brace: `}`\n * - Tilde: `~`\n *\n * ## Domain Part (after the @ symbol)\n *\n * ### Alphanumeric characters:\n * - Letters: `a-z A-Z` (case insensitive)\n * - Numbers: `0-9`\n *\n * ### Special characters:\n * - Hyphen: `-` (not at the beginning or end of a domain label)\n * - Dot: `.` (as a separator between domain labels)\n *\n * ## Complete Character Set Summary\n *\n * For practical email validation, the commonly accepted characters are:\n *\n * **Local part:** `a-z A-Z 0-9 . - _ +`\n *\n * **Domain part:** `a-z A-Z 0-9 . -`\n *\n * **Required separator:** `@`\n *\n * ## Regex Pattern Example\n *\n * Here's a TypeScript regex pattern for basic email validation that covers the most commonly used characters:\n *\n * ```typescript\n * const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n * ```\n *\n * ## Important Notes\n *\n * 1. **International characters:** Modern email systems support internationalized domain names (IDN) and may accept Unicode characters\n * 2. **Length limits:** Local part max 64 characters, domain part max 253 characters\n * 3. **Practical vs. theoretical:** While the RFC allows many special characters when quoted, most email providers and validation systems use a more restrictive set\n * 4. **Case sensitivity:** Email addresses are generally treated as case-insensitive, though technically the local part can be case-sensitive\n *\n * For most web applications, focusing on the basic alphanumeric characters plus `.-_+` for the local part and `.-` for the domain part will cover 99%+ of real-world email addresses.\n */\n\n/**\n * Async version: uses the same normalization flow and, if invalid (or dubious),\n * queries transformers.js embeddings to suggest a domain.\n *\n * @example\n * const result = await normaliseEmailWithAI(\"user@gmai.com\", {\n *   ai: {\n *     enabled: true,\n *     model: \"Xenova/all-MiniLM-L6-v2\",\n *     candidates: [\"gmail.com\", \"googlemail.com\"],\n *     threshold: 0.8,\n *     maxEdits: 2,\n *   },\n * });\n * if (result.valid) {\n *   console.log(`Normalized email: ${result.email}`);\n * } else if (result.ai) {\n *   console.log(`Did you mean: ${result.email.split('@')[0]}@${result.ai.domain}? (confidence: ${result.ai.confidence})`);\n * }\n * ```\n *\n * @param {string} raw\n * @param {EmailNormOptionsAI} opts\n * @returns {Promise<EmailNormResultAI>}\n */\nexport async function normaliseEmailWithAI(\n  raw: string,\n  opts: EmailNormOptionsAI = {}\n): Promise<EmailNormResultAI> {\n  const base = normaliseEmail(raw, opts) // run your existing, synchronous logic first\n\n  // If already valid, optionally still verify domain against candidates and attach ai meta (no change)\n  if (base.valid || !opts.ai?.enabled) {\n    return base as EmailNormResultAI\n  }\n\n  const at = String(raw).lastIndexOf('@')\n  if (at < 0) return base as EmailNormResultAI\n\n  const domainRaw = String(raw).slice(at + 1)\n  const aiOpts: AiEmailOptions = {\n    model: opts.ai?.model,\n    candidates: opts.ai?.candidates,\n    threshold: opts.ai?.threshold,\n    maxEdits: opts.ai?.maxEdits,\n  }\n\n  try {\n    const hit = await aiSuggestEmailDomain(domainRaw, aiOpts)\n    if (!hit) return base as EmailNormResultAI\n\n    // Don't auto-accept if the domain is blocklisted\n    const cfg = opts.blocklist\n    const blocked = cfg\n      ? ((): boolean => {\n          const d = hit.suggestion.toLowerCase()\n          const exact = (cfg.block?.exact ?? []).map((s: string) =>\n            s.toLowerCase()\n          )\n          if (exact.includes(d)) return true\n          for (const t of cfg.block?.tlds ?? [])\n            if (d.endsWith(String(t).toLowerCase())) return true\n          for (const s of cfg.block?.suffix ?? [])\n            if (d.endsWith(String(s).toLowerCase())) return true\n          for (const w of cfg.block?.wildcard ?? []) {\n            const re = new RegExp(\n              '^' +\n                String(w)\n                  .toLowerCase()\n                  .replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&')\n                  .replace(/\\*/g, '.*')\n                  .replace(/\\?/g, '.') +\n                '$',\n              'i'\n            )\n            if (re.test(d)) return true\n          }\n          return false\n        })()\n      : false\n\n    if (blocked) return base as EmailNormResultAI\n\n    // Provide suggestion (UI can display “Did you mean local@<suggestion>?”)\n    return {\n      ...base,\n      ai: {\n        domain: hit.suggestion,\n        confidence: hit.confidence,\n        reason: hit.reason,\n      },\n    }\n  } catch {\n    return base as EmailNormResultAI\n  }\n}\n","import { computed, ref, watch } from 'vue'\n\nimport { normaliseEmail } from '../utils/email/normaliseEmail'\nimport type { EmailNormResult, UseEmailOptions } from '../utils/email/types'\n\n/**\n * Vue composable for email normalization and validation.\n *\n * Provides reactive email processing with automatic normalization, validation,\n * and optional auto-formatting. Returns reactive references and helper functions\n * to manage email input state.\n *\n * @param {string} initial - Initial email value (default: '')\n * @param {UseEmailOptions} opts - Configuration options\n * @returns {object} Email composable interface\n * @returns {Ref<string>} returns.value - Reactive email input value\n * @returns {ComputedRef<string | null>} returns.email - normalised email address\n * @returns {ComputedRef<boolean>} returns.valid - Whether the email is valid\n * @returns {ComputedRef<string[]>} returns.changes - List of changes made during normalization\n * @returns {ComputedRef<EmailNormResult>} returns.result - Full normalization result\n * @returns {Function} returns.apply - Apply normalised email to the input value\n * @returns {Function} returns.validate - Manually trigger validation\n */\nexport function useEmail(initial = '', opts: UseEmailOptions = {}) {\n  opts.autoFormat = opts.autoFormat ?? false\n\n  // Internal track of validity\n  const isValid = ref(true)\n\n  const value = ref<string>(initial)\n  const result = computed<EmailNormResult>(() =>\n    normaliseEmail(value.value, opts)\n  )\n  const email = computed(() => result.value.email)\n  const valid = computed(() => isValid.value && result.value.valid)\n  const changes = computed(() => result.value.changes)\n\n  /**\n   * Apply the normalised email to the input value.\n   * Updates the input value with the normalised email if they differ.\n   */\n  function apply() {\n    if (email.value && value.value !== email.value) {\n      value.value = email.value\n    }\n  }\n\n  /**\n   * Manually trigger validation of the current email value.\n   *\n   * @returns {boolean} True if the email is valid (no changes needed), false otherwise\n   */\n  function validate(): boolean {\n    isValid.value = normaliseEmail(value.value, opts).changes.length === 0\n\n    return isValid.value\n  }\n\n  watch(result, (nv) => {\n    isValid.value = validate() && nv.valid\n  })\n\n  watch(value, (nv) => {\n    if (opts.autoFormat && email.value && nv !== email.value) {\n      value.value = email.value\n    }\n  })\n\n  return {\n    value,\n    email,\n    valid,\n    changes,\n    apply,\n    validate,\n  }\n}\n","// Removed Vue type imports to avoid type conflicts between different Vue installations\nimport {\n  DEFAULT_BLOCKLIST,\n  DEFAULT_FIX_DOMAINS,\n  DEFAULT_FIX_TLDS,\n} from '../utils/email/constants'\nimport { normaliseEmail } from '../utils/email/normaliseEmail'\nimport type { EmailNormOptions } from '../utils/email/types'\n\n/**\n * Email directive configurations\n *\n * Usage:\n * <input v-email=\"{ autoFormat: true, previewSelector: '#emailPreview' }\" />\n * <input v-email=\"{ onnormalised: (result) => console.log(result) }\" />\n */\nexport type EmailOpts = EmailNormOptions & {\n  /**\n   * Automatically format the email input value on input/blur events\n   *\n   * @default false\n   */\n  autoFormat?: boolean\n  /**\n   * Auto format events to listen to.\n   *\n   * @default { onInput: true, onBlur: true }\n   */\n  autoFormatEvents?: {\n    onInput?: boolean\n    onBlur?: boolean\n  }\n  /**\n   * CSS selector for an element to preview the normalised email and its validity\n   */\n  previewSelector?: string\n  /**\n   * Callback function called when the email is normalised\n   *\n   * @param {ReturnType<typeof normaliseEmail>} r The result of the normalization\n   * @returns void\n   */\n  onnormalised?: (r: ReturnType<typeof normaliseEmail>) => void\n}\n\n/**\n * An internal type for input elements with email directive state.\n * Must be an element that has a 'value' property (e.g., HTMLHTMLInputElement, HTMLTextAreaElement).\n */\ntype ElWithState = HTMLInputElement & {\n  __email__?: {\n    onEvent: (e: Event) => void\n    previewEl?: HTMLElement | null\n    opts: EmailOpts\n  }\n}\n\n/**\n * The resolved options and preview element for the email directive.\n */\ntype ResolvedOpts = {\n  opts: EmailOpts\n  previewEl: HTMLElement | null | undefined\n  previewSelector?: string\n}\n\n/**\n * Resolve the email directive options and preview element.\n *\n * @param {{value?: EmailOpts}} binding The directive binding\n * @param {ElWithState} el The element the directive is bound to\n * @returns {ResolvedOpts} The resolved options and preview element\n */\nfunction resolve(\n  binding: { value?: EmailOpts },\n  el: ElWithState\n): ResolvedOpts {\n  const value = binding.value || {}\n\n  const opts: EmailOpts = {\n    autoFormat: !!value.autoFormat,\n    previewSelector: value.previewSelector,\n    onnormalised: value.onnormalised,\n    blocklist: { ...DEFAULT_BLOCKLIST, ...(value.blocklist || {}) },\n    fixDomains: { ...DEFAULT_FIX_DOMAINS, ...(value.fixDomains || {}) },\n    fixTlds: { ...DEFAULT_FIX_TLDS, ...(value.fixTlds || {}) },\n    autoFormatEvents: {\n      onInput: value.autoFormatEvents?.onInput ?? true,\n      onBlur: value.autoFormatEvents?.onBlur ?? true,\n    },\n  }\n\n  const previewEl: HTMLElement | null = value.previewSelector\n    ? (el.closest('form')?.querySelector(value.previewSelector) ??\n      document.querySelector(value.previewSelector))\n    : null\n\n  return {\n    opts,\n    previewEl,\n  }\n}\n\n/**\n * Set the email preview element's content and validity state.\n *\n * @param {HTMLElement | null | undefined} target The element to update\n * @param {string | null} email The normalised email address\n * @param {boolean} valid Whether the email is valid\n * @returns {void}\n */\nfunction setPreview(\n  target: HTMLElement | null | undefined,\n  email: string | null,\n  valid: boolean\n) {\n  if (!target) {\n    return\n  }\n\n  target.textContent = email\n  target.setAttribute('data-valid', String(valid))\n}\n\n/**\n * Vue directive for normalizing and validating email inputs.\n *\n * Usage:\n * <input v-email=\"{ autoFormat: true, previewSelector: '#emailPreview' }\" />\n * <input v-email=\"{ onnormalised: (result) => console.log(result) }\" />\n *\n * The directive emits a 'directive:email:normalised' event when email normalization is complete.\n *\n * @param {HTMLInputElement} el The element the directive is bound to\n * @param {DirectiveBinding<EmailOpts>} binding The directive binding\n * @returns {void}\n */\nexport default {\n  mounted(el: HTMLInputElement, binding: { value?: EmailOpts }) {\n    const input = el as ElWithState\n    const { opts, previewEl } = resolve(binding, input)\n\n    if (!previewEl && Boolean(binding?.value?.previewSelector)) {\n      console.warn('[v-email] Preview element not found for selector:', {\n        previewSelector: binding.value?.previewSelector,\n      })\n    }\n\n    const run = (raw: string) => {\n      const r = normaliseEmail(raw, opts)\n\n      if (previewEl) {\n        setPreview(previewEl, r.email, r.valid)\n      }\n\n      if (r.valid) {\n        return r\n      }\n\n      input.dispatchEvent(\n        new CustomEvent('directive:email:normalised', { detail: r })\n      )\n      opts.onnormalised?.(r)\n\n      return r\n    }\n\n    const onEvent = (e: Event) => {\n      const raw = (e.target as HTMLInputElement).value\n      const r = run(raw)\n\n      if (opts.autoFormat && r.email && raw !== r.email) {\n        input.value = r.email\n        input.dispatchEvent(new Event('input', { bubbles: true }))\n        input.dispatchEvent(new Event('change', { bubbles: true }))\n      }\n    }\n\n    // initial\n    run(input.value || '')\n\n    const formatOnInput = opts.autoFormatEvents?.onInput ?? true\n    if (formatOnInput) {\n      input.addEventListener('input', onEvent)\n    }\n\n    const formatOnBlur = opts.autoFormatEvents?.onBlur ?? true\n    if (formatOnBlur) {\n      input.addEventListener('blur', onEvent)\n    }\n\n    if (previewEl instanceof HTMLElement) {\n      input.__email__ = {\n        onEvent,\n        previewEl,\n        opts,\n      }\n    }\n  },\n\n  /**\n   * Runs the normalisation process and updates the email directive's options and preview element.\n   *\n   * @param {HTMLInputElement} el The element the directive is bound to\n   * @param {DirectiveBinding<EmailOpts>} binding The directive binding\n   * @returns {void}\n   */\n  updated(el: HTMLInputElement, binding: { value?: EmailOpts }) {\n    const input = el as ElWithState\n\n    if (!input.__email__) {\n      return\n    }\n\n    const { opts, previewEl } = resolve(binding, input)\n    input.__email__.opts = opts\n\n    if (previewEl instanceof HTMLElement) {\n      input.__email__.previewEl = previewEl\n    }\n\n    const r = normaliseEmail(input.value || '', opts)\n\n    setPreview(previewEl, r.email, r.valid)\n  },\n\n  /**\n   * Cleans up event listeners and state when the directive is unbound.\n   *\n   * @param {HTMLInputElement} el The element the directive is bound to\n   * @returns {void}\n   */\n  beforeUnmount(el: HTMLInputElement) {\n    const input = el as ElWithState\n\n    if (!input.__email__) {\n      return\n    }\n\n    input.removeEventListener('input', input.__email__.onEvent)\n    input.removeEventListener('blur', input.__email__.onEvent)\n\n    delete input.__email__\n  },\n}\n"]}